#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module ToothBrush
  class Parser < Racc::Parser


attr_accessor :result

  def lex(code)
    @lexer = Lexer.new(code)
    @lexer.tokenize #Kickstart lexer
  end

  def parse(code)
    lex(code)
    @result
    do_parse
  end

  def next_token
    @lexer.next_token 
  end
##### State transition tables begin ###

racc_action_table = [
    13,    13,    14,    14,    24,     5,     3,    15,    15,     5,
    12,    12,    13,    13,    14,    14,    13,    16,    14,    15,
    15,    22,    12,    15,    20,    21,     5,    17 ]

racc_action_check = [
     0,    21,     0,    21,    19,     0,     0,     0,    21,    17,
     0,    21,    20,     7,    20,     7,    24,     1,    24,    20,
     7,    16,    20,    24,     8,     8,     6,     6 ]

racc_action_pointer = [
    -2,    17,   nil,   nil,   nil,   nil,    19,    11,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,     2,   nil,    -9,
    10,    -1,   nil,   nil,    14,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -22,    -2,    -3,    -4,    -5,    -6,   -10,   -11,   -12,
   -13,   -14,   -16,   -17,   -18,   -19,   -22,    -7,    -8,   -22,
   -22,   -22,    28,    -9,   -22,   -20,   -21,   -15 ]

racc_goto_table = [
     6,     2,    19,     4,     1,   nil,   nil,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,    27,
    25,    26 ]

racc_goto_check = [
     4,     2,     6,     3,     1,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     6,
     4,     4 ]

racc_goto_pointer = [
   nil,     4,     1,     3,     0,   nil,    -5,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     7,     8,     9,    10,    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 19, :_reduce_none,
  1, 19, :_reduce_2,
  1, 19, :_reduce_3,
  1, 19, :_reduce_4,
  1, 20, :_reduce_none,
  1, 21, :_reduce_6,
  2, 21, :_reduce_7,
  2, 21, :_reduce_8,
  3, 21, :_reduce_9,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 23, :_reduce_none,
  4, 23, :_reduce_15,
  1, 27, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  3, 25, :_reduce_20,
  3, 26, :_reduce_21 ]

racc_reduce_n = 22

racc_shift_n = 28

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :PARAMETERS => 3,
  :STRING => 4,
  :WHITESPACE => 5,
  :INDENT => 6,
  :TERMINATOR => 7,
  :NEWLINE => 8,
  :NUMBER => 9,
  :OPERATOR => 10,
  :FUNCTION => 11,
  :ALIAS => 12,
  :ASSIGNMENT => 13,
  :ADDITION => 14,
  :SUBSTRACTION => 15,
  :MULTIPLICATION => 16,
  :DIVISION => 17 }

racc_nt_base = 18

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "PARAMETERS",
  "STRING",
  "WHITESPACE",
  "INDENT",
  "TERMINATOR",
  "NEWLINE",
  "NUMBER",
  "OPERATOR",
  "FUNCTION",
  "ALIAS",
  "ASSIGNMENT",
  "ADDITION",
  "SUBSTRACTION",
  "MULTIPLICATION",
  "DIVISION",
  "$start",
  "Root",
  "Terminator",
  "Command",
  "Expression",
  "Declaration",
  "Literal",
  "Assignment",
  "Addition",
  "Alias" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
 parse_error! "Unexpected Token Found '#{val[0]}'\n" 
    result
end

def _reduce_3(val, _values, result)
 paint "1) Reached NEWLINE : #{val[0].inspect}\n" , :magenta 
    result
end

def _reduce_4(val, _values, result)
 paint "2) Reached Command : #{val[0]}\n" , :cyan 
    result
end

# reduce 5 omitted

def _reduce_6(val, _values, result)
 paint "3) Reached Expression : #{val[0]}\n" , :yellow 
    result
end

def _reduce_7(val, _values, result)
 paint "4) Expression NEWLINE : #{val[0]} | #{val[1].inspect}\n" , :white
    result
end

def _reduce_8(val, _values, result)
 paint "Reached Expression Terminator : #{val[0]} #{val[1]}\n" , :white 
    result
end

def _reduce_9(val, _values, result)
 paint "5) Expression NEWLINE Terminator : #{val[0]} | #{val[1].inspect} | #{val[2]}\n", :red 
    result
end

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
 paint "6) Declaration : #{val[0]} | #{val[1]} | #{val[2]} | #{val[3]}\n" , :blue 
    result
end

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

def _reduce_20(val, _values, result)
 paint "Assignment #{val[0]} | #{val[1]} | #{val[2]}\n" 
    result
end

def _reduce_21(val, _values, result)
 paint "Addition #{val[0]} | #{val[1]} | #{val[2]}\n" 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module ToothBrush
