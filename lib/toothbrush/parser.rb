#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module ToothBrush
  class Parser < Racc::Parser


attr_accessor :result

  def lex(code)
    @lexer = Lexer.new(code)
    @lexer.tokenize #Kickstart lexer
  end

  def parse(code)
    lex(code)
    @result
    do_parse
  end

  def next_token
    @lexer.next_token
  end
##### State transition tables begin ###

racc_action_table = [
     5,     4,     2,     3,     6 ]

racc_action_check = [
     2,     2,     0,     1,     3 ]

racc_action_pointer = [
   -10,     3,    -7,     4,   nil,   nil,   nil ]

racc_action_default = [
    -5,    -5,    -1,    -5,    -2,    -3,     7 ]

racc_goto_table = [
     1 ]

racc_goto_check = [
     1 ]

racc_goto_pointer = [
   nil,     0,   nil ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 14, :_reduce_1,
  2, 14, :_reduce_2,
  2, 14, :_reduce_3,
  1, 15, :_reduce_4 ]

racc_reduce_n = 5

racc_shift_n = 7

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :PARAMETERS => 3,
  :STRING => 4,
  :WHITESPACE => 5,
  :INDENT => 6,
  :TERMINATOR => 7,
  :NEWLINE => 8,
  :NUMBER => 9,
  :OPERATOR => 10,
  :FUNCTION => 11,
  :ALIAS => 12 }

racc_nt_base = 13

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "PARAMETERS",
  "STRING",
  "WHITESPACE",
  "INDENT",
  "TERMINATOR",
  "NEWLINE",
  "NUMBER",
  "OPERATOR",
  "FUNCTION",
  "ALIAS",
  "$start",
  "Root",
  "identifier" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 puts "Found Just Alias #{val[0]} -- #{val[1]}"
    result
end

def _reduce_2(val, _values, result)
 puts "Found Alias Newline #{val[0]} -- #{val[1]}"
    result
end

def _reduce_3(val, _values, result)
puts "Found Alias with terminator #{val[0]} -- #{val[1]}" 
    result
end

def _reduce_4(val, _values, result)
 puts "found first identifier" 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module ToothBrush
